 const handleSubmit = async (e: React.FormEvent) => {

        e.preventDefault();
        setPaymentStatus('processing');

    const Provider = new ethers.BrowserProvider(window.ethereum as Eip1193Provider);
    const Signer = await Provider.getSigner()
    const Marketplace_Contract = new ethers.Contract(MARKETPLACE_CONTRACT,MARKETPLACE_ABI,Signer)

      const shipAddress = `Name -> ${shippingAddress.fullName} || Phone -> ${shippingAddress.phoneNumber} || 
      Street -> ${shippingAddress.streetAddress} || City -> ${shippingAddress.city} || Parish -> ${shippingAddress.parish} || 
      Division -> ${shippingAddress.division} || Region -> ${shippingAddress.division} `

    // const Complete_Purchase = await Marketplace_Contract.placeOrder(,,shipAddress)
    // [object  {ID: QTY}]

    // const Receipt = await Complete_Purchase.wait()

    // console.log('The marketplace contract is:',Marketplace_Contract)

    // Simulate blockchain transaction
    setPaymentStatus('processing');
    
    try {
      // Simulate transaction delay
      await new Promise((resolve) => setTimeout(resolve, 2000));
      
      // Simulate successful transaction
      const mockTxHash = '0x' + Array(64).fill(0).map(() => 
        Math.floor(Math.random() * 16).toString(16)).join('');
      
      setTransactionHash(mockTxHash);
      setPaymentStatus('error');
      
      // Clear cart after successful purchase
      setTimeout(() => {
        clearCart();
      }, 5000);
    } catch (error) {
      console.error('Transaction failed:', error);
      setPaymentStatus('error');
    }
  };